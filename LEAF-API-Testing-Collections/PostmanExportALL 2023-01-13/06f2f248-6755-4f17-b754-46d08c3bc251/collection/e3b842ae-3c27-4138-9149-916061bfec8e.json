{"info":{"_postman_id":"e3b842ae-3c27-4138-9149-916061bfec8e","name":"Temp","schema":"https://schema.getpostman.com/json/collection/v2.1.0/collection.json"},"item":[{"name":"GET all Categories Testing","event":[{"listen":"test","script":{"id":"5854469a-eb97-4f34-ba97-f366d75f12c2","exec":[" \r","pm.test(\"Form-Categories.  Status = 200\", function () {\r","    pm.response.to.have.status(200);\r","});\r","\r","var time = pm.response.responseTime;\r","pm.test('Response time: ' + time + ' ms', () => pm.response.to.have.status(200));\r","\r","\r","pm.test(\"Contains expected value\", function () {\r","    const response = pm.response.json();\r","    const catIDs = response.map(catID => catID.categoryID);         //catIDs is the array containing IDs\r","    //console.log(catIDs);\r","    pm.variables.set('catIDs', catIDs); //Creates a variable or updates an existing one.\r","                                        //2nd catIDs is the var defined on line 3 - Only works in collection runner\r","    console.log(catIDs);\r","    pm.variables.set('currentCatID', catIDs.shift());\r","\r","    let currentID = catIDs.shift();\r","    console.log(currentID);\r","    pm.expect(currentID).to.eql(\"form_b7c34\");  //    was: form_7b278 for Pre-Prod\r","\r","//Pickup here => \r","//Vid = 7:57\r","\r","});\r","\r","/* \r","His POST data to insert\r","\"toolID\": 4643\r","\r","This ID then appears in a GET request\r","\r","const toolIDs = response.map(tool => tool.id);\r","console.log(toolIDs);\r","\r","Valid CategoryID(s)\r","0: \"form_854b7\"\r","1: \"form_1542d\"\r","2: \"form_8bfe8\"\r","3: \"form_8aded\"\r","4: \"form_e73f1\"\r","5: \"form_945a0\"\r","6: \"form_24f22\"\r","7: \"form_55af0\"\r","8: \"form_af5a3\"\r","9: \"form_354e4\"\r","10: \"form_66e4e\"\r","\r","\r","*/\r","\r","\r","\r","\r","\r","\r","/* \r","\r","\r","pm.test(\"Contains expected value\", function () {\r","    var jsonData = pm.response.json();\r","    console.log(jsonData.response);   \r","    pm.expect(jsonData.categoryID).to.eql(\"form_11e07\");  //iterate through\r","});\r","*/\r","\r","\r","\r","\r","\r","/*\r","// saving the API Response as a variable\r","let response = pm.response.json();\r","\r","// looping through each camera object\r","response.data.ActiveCamera.forEach(function(cam) {\r","    // checking if the camera has a property named \"RectilinearIR\"\r","    if(cam.hasOwnProperty(\"RectilinearIR\")) {\r","        // test if the ImageCenterX value in the object is equal to 0.5\r","        pm.test(\"Test diameter for RectilinearIR\", function () {\r","            let intrinsicCalibrationParams = cam.RectilinearIR.IntrinsicCalibration;\r","            pm.expect(intrinsicCalibrationParams.ImageCenterX).to.eql(0.5);\r","        });\r","    } \r","    // checking if the camera has a property named \"Fisheye\"\r","    if (cam.hasOwnProperty(\"Fisheye\")) {\r","        // test if the ImageCenterX value in the object is equal to 0.5109375\r","            pm.test(\"Test diameter for Fisheye\", function () {\r","            let intrinsicCalibrationParams = cam.Fisheye.IntrinsicCalibration;\r","            pm.expect(intrinsicCalibrationParams.ImageCenterX).to.eql(0.5109375);\r","        });\r","    }\r","});\r","*/\r","\r","\r","\r","\r","//    \"categoryID\": \"form_11e07\",\r","//    \"categoryName\": \"AUT (Copy)\"\r","/*\r","pm.test(\"Response time is less than limit\", function() {\r","var limit = 10;\r","pm.expect(pm.response.responseTime, \"Response time was longer than \" + limit + \" ms.\").to.be.below(limit);\r","console.log(\"Response Time: \" + pm.response.responseTime + \" ms\" + \" / Response Date: \" + pm.response.headers.get(\"Date\"));\r","});\r","\r","*/"],"type":"text/javascript"}},{"listen":"prerequest","script":{"id":"0c5d56ec-2d8c-4a7b-bcd8-f55461935f24","exec":["\r","\r","/* \r","const random = Math.random().toString(36).substring(2);\r","const formCategories = \"formCategories \" + random;\r","pm.collectionVariables.set(\"formCategories\", formCategories);\r","*/"],"type":"text/javascript"}}],"id":"6c87ce2b-9839-4809-ad1c-f2d50ffff855","protocolProfileBehavior":{"disableBodyPruning":true,"disabledSystemHeaders":{}},"request":{"auth":{"type":"noauth"},"method":"GET","header":[{"key":"CSRFToken","value":"{{CSRFToken}}","type":"text","disabled":true}],"body":{"mode":"raw","raw":"","options":{"raw":{"language":"json"}}},"url":{"raw":"https://localhost/LEAF_Request_Portal/api/form/categories","protocol":"https","host":["localhost"],"path":["LEAF_Request_Portal","api","form","categories"]}},"response":[]},{"name":"OLD GET all Categories","event":[{"listen":"test","script":{"id":"5854469a-eb97-4f34-ba97-f366d75f12c2","exec":["\r","//******* Begin Valentine Tutorial *********\r","//pm.test(\"Contains expected value\", function () {\r","    const response = pm.response.json();  // response is stored js object\r","        //  create an array only with this ID\r","    const catIDs =  response.map(catID => catID.categoryID);   // .map goes through each element of the array   \r","    console.log(catIDs);\r","    pm.variables.set('catIDs', catIDs);\r","//}\r","\r","\r","//pm.test(\"Contains expected value\", function () {\r","    const response = pm.response.json();\r","    const catIDs = response.map(catID => catID.categoryID);         //catIDs is the array containing IDs\r","    console.log(catIDs);\r","    pm.variables.set('catIDs', catIDs); //Creates a variable or updates an existing one.\r","                                        //2nd catIDs is the var defined on line 3 - Only works in collection runner\r"," });          //Pickup here => Go back to 2:55\r","\r","//6:05 in vid\r","    //pm.expect(jsonData.categoryID).to.eql(\"form_8bfe8\");\r","//    pm.expect(catIDs.categoryID).to.eql(\"form_8bfe8\");\r","\r"," //var jsonData = pm.response.json();\r"," //   console.log(jsonData.response);   \r"," //   pm.expect(jsonData.categoryID).to.eql(\"form_11e07\");\r","//});\r","\r","/* \r","pm.test(\"Contains expected value\", function () {\r","    var jsonData = pm.response.json();\r","    console.log(jsonData.response);   \r","    pm.expect(jsonData.categoryID).to.eql(\"form_11e07\");  //iterate through\r","});\r","*/\r","\r","\r",""],"type":"text/javascript"}},{"listen":"prerequest","script":{"id":"0c5d56ec-2d8c-4a7b-bcd8-f55461935f24","exec":["\r","\r","/* \r","const random = Math.random().toString(36).substring(2);\r","const formCategories = \"formCategories \" + random;\r","pm.collectionVariables.set(\"formCategories\", formCategories);\r","*/"],"type":"text/javascript"}}],"id":"720f72b2-107c-460c-85dc-2f9629050d18","protocolProfileBehavior":{"disableBodyPruning":true,"disabledSystemHeaders":{}},"request":{"auth":{"type":"noauth"},"method":"GET","header":[{"key":"CSRFToken","value":"{{CSRFToken}}","type":"text","disabled":true}],"body":{"mode":"raw","raw":"","options":{"raw":{"language":"json"}}},"url":{"raw":"https://localhost/LEAF_Request_Portal/api/form/categories","protocol":"https","host":["localhost"],"path":["LEAF_Request_Portal","api","form","categories"]}},"response":[]},{"name":"Local - FIX Create Form 3","event":[{"listen":"test","script":{"id":"1e6bef6d-a600-48a8-b2b8-09d084aed38b","exec":["\r","\r","\r","//var xsrfCookie = postman.getResponseCookie(\"XSRF-TOKEN\");\r","//postman.setEnvironmentVariable(\"xsrf-token\", xsrfCookie.value);\r","\r","\r","//console.log(postman);\r","\r","//var xsrfCookie = pm.getRequestCookie(\"XSRF-TOKEN\");\r","//var xsrfCookie = pm.getRequestCookie(\"XSRF-TOKEN\");\r","//pm.setEnvironmentVariable(\"xsrf-token\", xsrfCookie.value);\r","\t//console.log(xsrfCookie.value);\r","\r","/* Example from https://blogs.sap.com/2019/08/27/csrf-token-in-postman.-one-click-to-get-it-and-use-it./ */\r","// pm.globals.set(\"variable_key\", \"variable_value\");\r","// pm.test(\"Form-Categories.  Status = 200\", function () {\r","//     pm.response.to.have.status(200);\r","// });\r","\r","// var time = pm.response.responseTime;\r","// pm.test('Response time: ' + time + ' ms', () => pm.response.to.have.status(200));\r","\r","// pm.test(\"JSON Contains expected value\", function () {\r","//     const response = pm.response.json();\r","//         //  create an array only with this ID\r","//     const catIDs = response.map(catID => catID.categoryID);         //catIDs is the array containing IDs\r","//     console.log(catIDs);\r","//     pm.variables.set('catIDs', catIDs); //2nd catIDs is the var defined on line 3 - Only works in collection runner\r","\r","//     let currentCatID = catIDs.shift();\r","//     console.log(currentCatID);\r","//     pm.expect(currentCatID).to.eql(\"form_b7c34\");  //    //form_d203e \r","// });\r","\r","// pm.test(\"Successful POST request\", function () {\r","// \tpm.expect(pm.response.code).to.be.oneOf([201, 202]);\r","// });\r","\r","// CONST RANDOM = MATH.RANDOM().TOSTRING(36).SUBSTRING(2);\r","\r","// CONST FORMCATEGORIES = \"FORMCATEGORIES \" + RANDOM;\r","// PM.COLLECTIONVARIABLES.SET(\"FORMCATEGORIES\", FORMCATEGORIES);\r","\r",""],"type":"text/javascript"}},{"listen":"prerequest","script":{"id":"0fc167b9-bc0d-418f-9538-f3c0c537db90","exec":["//var xsrfCookie = postman.getResponseCookie(\"XSRF-TOKEN\");\r","//postman.setEnvironmentVariable(\"xsrf-token\", xsrfCookie.value);\r","\r","\r","/* Example from https://blogs.sap.com/2019/08/27/csrf-token-in-postman.-one-click-to-get-it-and-use-it./ */\r","// console.log('Pre-request Script from Request start');\r","\r","// // We don't need to do anything if it's GET or x-csrf-token header is explicitly presented\r","// if (pm.request.method !== 'GET' && !(pm.request.headers.has('x-csrf-token'))) {\r","\r","//   var csrfRequest = pm.request.clone();\r","//   console.log(csrfRequest);\r","//   csrfRequest.method = 'GET';\r","//   if (pm.request.method === 'POST') {\r","//     // for POST method usually it is ....<something>Collection in the URL\r","//     // so we add $top=1 just to quickly get csrf token; \r","//     // for PUT, PATCH or DELETE the same URL would be enough,\r","//     // because it points to the actual entity\r","//     csrfRequest.url = pm.request.url + '?$top=1';\r","//   }\r","\r","//   csrfRequest.upsertHeader({\r","//     key: 'xsrf-token', \t\t\t\t//'x-csrf-token',\r","//     value: 'fetch'\r","//   });\r","\r","//   pm.sendRequest(csrfRequest, function(err, res) {\r","//     console.log('pm.sendRequest start: ', err, res);\r","//     if (err) {\r","//       console.log(err);\r","//     } else {\r","//       //var csrfToken = res.headers.get('x-csrf-token');\r","//       var csrfToken = res.headers.get('xsrf-token');\r","\t\r","// \t  if (csrfToken) {\r","//         console.log('csrfToken fetched:' + csrfToken);\r","//         pm.request.headers.upsert({\r","//           key: 'x-csrf-token',\r","//           value: csrfToken\r","//         });\r","//       } else {\r","//         console.log('No csrf token fetched');\r","//       }\r","//     }\r","//     console.log('pm.sendRequest end');\r","//   });\r","// }\r","\r","// console.log('Pre-request Script from Request end');\r","\r","\r","\r","\r","////For POST requests\r","////Probably need to use the 'POST' address as listed in the LEAF API Documentation\r","////THIS ONLY WORKS by Executing TestCollection as a COLLECTION\r","  \r","/*   Lines 6 through 10 are valid (in different context)   */\r","\r","//const catIDs = pm.variables.get('catIDs');      //same array of categoryIDs created in GET request test\r","//console.log('Pre-request for POST request ' + catIDs);\r","//catIDs.shift();    //get first element/Id in array and return it. _(shift function by itself)\r","    \r","//pm.variables.set('currentCatID', catIDs.shift());    //array or modify original array (catIDs)  //Set variable currenCatID\r","\r","//// if(Array.isArray(catIDs) && catIDs.length > 0) {  //array item must have length > 0  (a valid Cat ID)\r","////     postman.setNextRequest('POST Category');      //iterate through all members of array   USE Test Name VID: 7:08-9:16\r","////     console.log('POST CATEGORY');                 //Can also use in Test section\r","//// } else {\r","////     postman.setNextRequest(null);\r","//// }\r","\r",""],"type":"text/javascript"}}],"id":"87e396e5-98a8-4600-94f9-c9a971766eed","protocolProfileBehavior":{"disableBodyPruning":true,"disabledSystemHeaders":{}},"request":{"auth":{"type":"noauth"},"method":"POST","header":[{"key":"X-XSRF-TOKEN","value":"{{xsrf-token}}","type":"text"}],"body":{"mode":"raw","raw":"{\r\n    \"name\": \"TestForm\",\r\n    \"description\": \"TestDescription\"\r\n}"},"url":{"raw":"https://localhost/LEAF_Request_Portal/api/form/new","protocol":"https","host":["localhost"],"path":["LEAF_Request_Portal","api","form","new"],"query":[{"key":"XSRF-TOKEN","value":"token","disabled":true}]}},"response":[]}],"auth":{"type":"ntlm"},"event":[{"listen":"prerequest","script":{"id":"0cd73932-c509-4de7-ba32-9df67558e479","type":"text/javascript","exec":[""]}},{"listen":"test","script":{"id":"0e071414-4eee-4295-bc92-88e10a8cd9a0","type":"text/javascript","exec":[""]}}]}